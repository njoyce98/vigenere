import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.*;
import java.awt.Container;
import javax.swing.*;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import java.awt.Dimension;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.event.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.charset.Charset;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.BorderFactory;
import javax.swing.JMenuBar;
import java.awt.Checkbox;
import javax.swing.AbstractButton;
import java.awt.datatransfer.*;
import java.awt.Toolkit;
import java.awt.Color;
public class guimaster extends JFrame implements ActionListener, KeyListener{
  JTextArea input, output, keyIn, inputCount, outputCount;
  JFrame jf;
  JMenu FileM, OptionsM;
  JMenuItem openM, saveM;
  JCheckBoxMenuItem recursionM = new JCheckBoxMenuItem("Recursion");
  JButton ptcB, ctpB, copyPM;
  String plaintext = "";
  String ciphertext = "";
  String ciphertext2 = "";
  String key = "";
  String[] returned = new String[2];
  BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
  plainToCipher ptc = new plainToCipher();
  cipherToPlain ctp = new cipherToPlain();
  recursivePlainToCipher rptc = new recursivePlainToCipher();
  StringBuffererClass sBuffer = new StringBuffererClass();
  int inCharCount = 0;
  JFileChooser fc = new JFileChooser();
  static private final String newline = "\n";
  public guimaster(){
    Container container = getContentPane();
    container.setLayout(new GridLayout(1,3));
    
    JPanel p03 = new JPanel(new GridLayout());;
    container.add(p03);
    
    input = new JTextArea();
    input.addKeyListener(this);
    input.setBorder(BorderFactory.createTitledBorder("Input"));
    p03.add(input);
    
    JScrollPane ScrollPaneInput = new JScrollPane(input);
    JPanel p1 = new JPanel(new GridLayout(4,1));
    
    inputCount = new JTextArea();
    inputCount.setSize(new Dimension (1,1));
    inputCount.setEditable(false);
    inputCount.setBorder(BorderFactory.createTitledBorder("Character count"));
    inputCount.setToolTipText("The larger the text the more accurate the decryption will be");
    p1.add(inputCount);
    String inputText = input.getText();
    inputCount.setText(String.valueOf(inCharCount));
    
    keyIn = new JTextArea();
    keyIn.setBorder(BorderFactory.createTitledBorder("Key"));
    keyIn.setToolTipText("3-5 alphabetical characters");
    keyIn.getDocument().putProperty("filterNewLines", Boolean.TRUE);
    
    p1.add(ptcB = new JButton("Plain to cipher"));
    p1.add(ctpB = new JButton("Cipher to plain"));
    p1.add(keyIn);
    container.add(p1);
    
    JPanel outP = new JPanel(new GridLayout(1,2,30,30));;
    container.add(outP);
    outP.add(output = new JTextArea());
    output.setBorder(BorderFactory.createTitledBorder("Output"));
    output.setToolTipText("sample text");
    JScrollPane ScrollPaneOutput = new JScrollPane(output);
    input.setLineWrap(true);
    input.setWrapStyleWord(true);
    output.setLineWrap(true);
    output.setWrapStyleWord(true);
    output.setEditable(false);
    p03.add(ScrollPaneInput);
    outP.add(ScrollPaneOutput);
    ptcB.addActionListener(this);
    ctpB.addActionListener(this);
    
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt", "text");
    fc.setFileFilter(filter);
    fc.setDialogTitle("Select text file");
    fc.setCurrentDirectory(new java.io.File("."));
    
    menubarMake();
  }
  public void actionPerformed(ActionEvent e){
    if(e.getSource() == ptcB){
      output.setText("");
      ciphertext = "";
      String keyTemp = "";
      keyTemp = keyIn.getText();
      key = "";
      keyTemp = keyTemp.toLowerCase();
      for(int x = 0; x < keyTemp.length(); x++){
        char c = keyTemp.charAt(x);
        if(c > 'a' - 1 && c < 'z' + 1){
          key += c;
        }
      }
      key = key.toLowerCase();
      String plaintextTemp = "";plaintextTemp = input.getText();
      plaintextTemp = plaintextTemp.toLowerCase();
      plaintext = "";
      for(int x = 0; x < plaintextTemp.length(); x++){
        char c = plaintextTemp.charAt(x);
        if(c > 'a' - 1 && c < 'z' + 1){
          plaintext += c;
        }
      }
      if(!key.equals("") && key.length() < 6 && key.length() > 2){
        if(recursionM.getState() == true){
          ciphertext = (rptc.rptc(plaintext, key, ciphertext));
        }
        else{
          ciphertext = (ptc.ptc(plaintext, key));
        }
        output.setText(ciphertext);
      }
      else{
        JOptionPane.showMessageDialog(null, "Enter an alphabetical key between 3-5 characters");
      }
    }
    if(e.getSource() == ctpB){
      ciphertext = input.getText();
      returned = (ctp.ctp(ciphertext));
      plaintext = returned[1];
      key = returned[0];
      keyIn.setText(key);
      output.setText(plaintext);
    }
    if(e.getSource() == openM){
      String filename = "";
      if(fc.showOpenDialog(guimaster.this) == JFileChooser.APPROVE_OPTION){
        filename = fc.getSelectedFile().getAbsolutePath();
        File fileCheck = new File(filename);
        if(fileCheck.exists()){
          try{
            plaintext = (sBuffer.stringbufferer(filename)).toString();
          } catch (IOException i){
            System.err.println("Error: " + i);
          }
        }
        else{
          JOptionPane.showMessageDialog(null, "File cannot be found");
        }
      }
      key = keyIn.getText();
      input.setText(plaintext);
    }
    if(e.getSource() == saveM){
      if(fc.showSaveDialog(guimaster.this) == JFileChooser.APPROVE_OPTION){
        String content = input.getText();
        File fi = fc.getSelectedFile();
        String filename = fc.getSelectedFile().getAbsolutePath();
        File fileCheck = new File(filename);
        if(fileCheck.exists()){
          Object[] options = {"Yes", "New File", "Cancel"};
          int n = JOptionPane.showOptionDialog(null, "The file already exists, would you like to overwrite it?", "Overwrite?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
          if(n == JOptionPane.YES_OPTION){
            try{
              FileWriter fw = new FileWriter(fi.getPath());
              fw.write(content);
              fw.flush();
              fw.close();
            }catch(Exception e2){
              JOptionPane.showMessageDialog(null, e2.getMessage());
            }
          }
          if(n == JOptionPane.NO_OPTION){
            String newFilename = JOptionPane.showInputDialog(null, "Name the new text file");
            try{
              PrintWriter writer = new PrintWriter(newFilename + ".txt", "UTF-8");
              writer.print(input.getText());
              writer.close();
            } catch (IOException e3) {
              //
            }
          }
        }
      }
    }
    if(e.getSource() == recursionM){
      //
    }
    if(e.getSource() == copyPM){
      if(!output.getText().equals("")){
        String copy = output.getText();
        StringSelection stringSelection = new StringSelection(copy);
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
        input.setText(copy);
      }
    }
  }
  public static void main(String [] args){
    guimaster frame = new guimaster();
    frame.setTitle("GUI");
    frame.setSize(1500, 900);
    frame.setVisible(true);
    frame.setResizable(true);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setLocationRelativeTo(null);
  }
  void draw(){
    //
  }
  void menubarMake(){
    JMenuBar jmb = new JMenuBar();
    
    FileM = new JMenu("File");
    jmb.add(FileM);
    openM = new JMenuItem("Open File");
    FileM.add(openM);
    openM.addActionListener(this);
    saveM = new JMenuItem("Save File");
    FileM.add(saveM);
    saveM.addActionListener(this);
    
    OptionsM = new JMenu("Options");
    jmb.add(OptionsM);
    OptionsM.add(recursionM);
    recursionM.addActionListener(this);
    
    copyPM = new JButton("Copy & Paste");
    copyPM.setOpaque(false);
    copyPM.setContentAreaFilled(false);
    copyPM.setBorderPainted(false);
    copyPM.setPreferredSize(new Dimension(FileM.getPreferredSize()));
    jmb.add(copyPM);
    copyPM.addActionListener(this);
    
    setJMenuBar(jmb);
  }
  public void keyPressed(KeyEvent e){
    //
  }
  public void keyReleased(KeyEvent e){
    //
  }
  public void keyTyped(KeyEvent e){
    int count = 1;
    if(input.getText().equals("")){
      inputCount.setText(String.valueOf(0));
    }
    else{
      for(int x = 0; x < input.getText().length(); x++){
        char c = input.getText().charAt(x);
        if(c > ('a' - 1) && c < ('z' + 1)){
          count += 1;
        }
      }
      inputCount.setText(String.valueOf(count));
    }
  }
}
class SampleMenuListener implements MenuListener {
  @Override
  public void menuSelected(MenuEvent e) {
    //
  }
  @Override
  public void menuDeselected(MenuEvent e) {
    //
  }
  @Override
  public void menuCanceled(MenuEvent e) {
    //
  }
}
class MenuActionListener implements ActionListener {
  public void actionPerformed(ActionEvent e) {
    //
  }
}